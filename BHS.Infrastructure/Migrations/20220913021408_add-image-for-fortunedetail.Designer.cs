// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using BHS.Infrastructure;

#nullable disable

namespace BHS.Infrastructure.Migrations
{
    [DbContext(typeof(BHSDbContext))]
    [Migration("20220913021408_add-image-for-fortunedetail")]
    partial class addimageforfortunedetail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BHS.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Categories.CategoryOfVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("CategoryOfVendor", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Fortunes.Fortune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageBanner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Fortune", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Fortunes.FortuneDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FortuneId")
                        .HasColumnType("int");

                    b.Property<int>("FortuneType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Probability")
                        .HasColumnType("int");

                    b.Property<int>("QtyAvailable")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FortuneId");

                    b.ToTable("FortuneDetail", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Languages.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.BarCodeOfProductParticipatingLoyalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("ProductParticipatingId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductParticipatingId");

                    b.ToTable("BarCodeOfProductParticipatingLoyalty", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.GiftOfLoyalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FortuneId")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("LoyaltyProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QtyAvailable")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FortuneId");

                    b.HasIndex("LoyaltyProgramId");

                    b.HasIndex("ProductId");

                    b.ToTable("GiftOfLoyalty", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgBannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("LoyaltyProgram", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgramImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoyaltyProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyProgramId");

                    b.ToTable("LoyaltyProgramImage", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.ProductParticipatingLoyalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmountOfMoney")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoyaltyProgramId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoyaltyProgramId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductParticipatingLoyalty", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Notify.NotificationSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AttachFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatetimeStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("NotificationSetup", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Notify.NotifyMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AttachFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatetimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("FcmMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationSetUpId")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SeenTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSetUpId");

                    b.HasIndex("UserId");

                    b.ToTable("NotifyMessage", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId");

                    b.HasIndex("ProductId");

                    b.ToTable("AttributeValue", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.ParentProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int?>("Highlight")
                        .HasColumnType("int");

                    b.Property<string>("ImgBanner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StkUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("ParentProduct", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgBannerURL")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromotion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ParentProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PromotionTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Qty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(-1f);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("Tstamp")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("UnitRate")
                        .HasColumnType("real");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Barcode");

                    b.HasIndex("ParentProductId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.ProductForUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductForUser", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.PromotionalProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPromo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentProductId")
                        .HasColumnType("int");

                    b.Property<int>("PercentPromo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PromotionalProduct", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRemove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.FortuneTurnAddOfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FortuneId")
                        .HasColumnType("int");

                    b.Property<int>("TurnAdd")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FortuneId");

                    b.HasIndex("UserId");

                    b.ToTable("FortuneTurnAddOfUser", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.FortuneTurnOfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FortuneId")
                        .HasColumnType("int");

                    b.Property<int>("TurnAvailable")
                        .HasColumnType("int");

                    b.Property<int>("TurnTotal")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FortuneId");

                    b.HasIndex("UserId");

                    b.ToTable("FortuneTurnOfUser", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.FortuneUserReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FortuneDetailId")
                        .HasColumnType("int");

                    b.Property<int>("FortuneId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FortuneDetailId");

                    b.HasIndex("FortuneId");

                    b.HasIndex("UserId");

                    b.ToTable("FortuneUserReward", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.GiftOfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GiftOfLoyaltyId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GiftOfLoyaltyId");

                    b.HasIndex("UserId");

                    b.ToTable("GiftOfUser", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.PointOfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FortuneId")
                        .HasColumnType("int");

                    b.Property<int?>("LoyaltyProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int?>("ProductParticipatingLoyaltyId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FortuneId");

                    b.HasIndex("LoyaltyProgramId");

                    b.HasIndex("ProductParticipatingLoyaltyId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("PointOfUser", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.UserFollowVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFollow")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("UserFollowVendor", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.UserSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFingerprintLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsGetNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LangId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("LangId");

                    b.HasIndex("VendorId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FeedbackDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeedbackObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("FeedbackType")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.FeedbackImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackImage", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.RankOfUserSetting", b =>
                {
                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 9, 13, 2, 14, 8, 40, DateTimeKind.Utc).AddTicks(3885));

                    b.Property<int>("PointOfDiamondMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3000);

                    b.Property<int>("PointOfGoldMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2000);

                    b.Property<int>("PointOfSilverMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000);

                    b.HasKey("VendorId");

                    b.ToTable("RankOfUserSetting", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ShortName")
                        .HasMaxLength(400)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalFeedback")
                        .HasColumnType("int");

                    b.Property<string>("VendorKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendor", (string)null);
                });

            modelBuilder.Entity("BHS.Domain.Entities.Categories.CategoryOfVendor", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Categories.Category", "Category")
                        .WithMany("CategoryOfVendors")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("CategoryOfVendors")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Fortunes.Fortune", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("Fortunes")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Fortunes.FortuneDetail", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Fortunes.Fortune", "Fortune")
                        .WithMany("FortuneDetails")
                        .HasForeignKey("FortuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fortune");
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.BarCodeOfProductParticipatingLoyalty", b =>
                {
                    b.HasOne("BHS.Domain.Entities.LoyaltyPrograms.ProductParticipatingLoyalty", "ProductParticipating")
                        .WithMany("BarCodeOfProductParticipatingLoyalty")
                        .HasForeignKey("ProductParticipatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductParticipating");
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.GiftOfLoyalty", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Fortunes.Fortune", "Fortune")
                        .WithMany()
                        .HasForeignKey("FortuneId");

                    b.HasOne("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgram", "LoyaltyProgram")
                        .WithMany("GiftOfLoyalty")
                        .HasForeignKey("LoyaltyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Fortune");

                    b.Navigation("LoyaltyProgram");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgram", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("LoyaltyPrograms")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgramImage", b =>
                {
                    b.HasOne("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgram", "LoyaltyProgram")
                        .WithMany("LoyaltyProgramImages")
                        .HasForeignKey("LoyaltyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoyaltyProgram");
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.ProductParticipatingLoyalty", b =>
                {
                    b.HasOne("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgram", "LoyaltyProgram")
                        .WithMany("ProductParticipatingLoyalty")
                        .HasForeignKey("LoyaltyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductParticipatingLoyalties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LoyaltyProgram");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Notify.NotificationSetUp", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("NotificationSetUps")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Notify.NotifyMessage", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Notify.NotificationSetUp", "NotificationSetUp")
                        .WithMany("NotifyMessages")
                        .HasForeignKey("NotificationSetUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany("NotifyMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationSetUp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.AttributeValue", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Products.Attributes", "Attributes")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Products.Product", "Product")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.ParentProduct", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Categories.Category", "Category")
                        .WithMany("ParentProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("ParentProducts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Products.ParentProduct", "ParentProduct")
                        .WithMany("Products")
                        .HasForeignKey("ParentProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentProduct");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.ProductForUser", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductForUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany("ProductForUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.ProductImage", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Products.ParentProduct", null)
                        .WithMany("ProductImages")
                        .HasForeignKey("ParentProductId");

                    b.HasOne("BHS.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.PromotionalProduct", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Products.Product", "Product")
                        .WithMany("PromotionalProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.Cart", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Products.Product", "Product")
                        .WithOne("Cart")
                        .HasForeignKey("BHS.Domain.Entities.Users.Cart", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.FortuneTurnAddOfUser", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Fortunes.Fortune", "Fortune")
                        .WithMany("FortuneTurnAddOfUsers")
                        .HasForeignKey("FortuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fortune");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.FortuneTurnOfUser", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Fortunes.Fortune", "Fortune")
                        .WithMany("FortuneTurnOfUsers")
                        .HasForeignKey("FortuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fortune");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.FortuneUserReward", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Fortunes.FortuneDetail", "FortuneDetail")
                        .WithMany("FortuneUserRewards")
                        .HasForeignKey("FortuneDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Fortunes.Fortune", "Fortune")
                        .WithMany("FortuneUserRewards")
                        .HasForeignKey("FortuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fortune");

                    b.Navigation("FortuneDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.GiftOfUser", b =>
                {
                    b.HasOne("BHS.Domain.Entities.LoyaltyPrograms.GiftOfLoyalty", "GiftOfLoyalty")
                        .WithMany("GiftOfUsers")
                        .HasForeignKey("GiftOfLoyaltyId");

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany("GiftOfUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GiftOfLoyalty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.PointOfUser", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Fortunes.Fortune", "Fortune")
                        .WithMany("PointOfUsers")
                        .HasForeignKey("FortuneId");

                    b.HasOne("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgram", "LoyaltyProgram")
                        .WithMany("PointOfUsers")
                        .HasForeignKey("LoyaltyProgramId");

                    b.HasOne("BHS.Domain.Entities.LoyaltyPrograms.ProductParticipatingLoyalty", "ProductParticipatingLoyalty")
                        .WithMany("PointOfUsers")
                        .HasForeignKey("ProductParticipatingLoyaltyId");

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany("PointOfUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("PointOfUsers")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fortune");

                    b.Navigation("LoyaltyProgram");

                    b.Navigation("ProductParticipatingLoyalty");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.UserFollowVendor", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany("UserFollowVendors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("UserFollowVendors")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.UserSettings", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Languages.Language", "Language")
                        .WithMany("UserSettings")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("BHS.Domain.Entities.Users.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("UserSettings")
                        .HasForeignKey("VendorId");

                    b.Navigation("Language");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.Feedback", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithMany("Feedbacks")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.FeedbackImage", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Vendors.Feedback", "Feedback")
                        .WithMany("FeedbackImages")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.RankOfUserSetting", b =>
                {
                    b.HasOne("BHS.Domain.Entities.Vendors.Vendor", "Vendor")
                        .WithOne("RankOfUserSetting")
                        .HasForeignKey("BHS.Domain.Entities.Vendors.RankOfUserSetting", "VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Categories.Category", b =>
                {
                    b.Navigation("CategoryOfVendors");

                    b.Navigation("ParentProducts");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Fortunes.Fortune", b =>
                {
                    b.Navigation("FortuneDetails");

                    b.Navigation("FortuneTurnAddOfUsers");

                    b.Navigation("FortuneTurnOfUsers");

                    b.Navigation("FortuneUserRewards");

                    b.Navigation("PointOfUsers");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Fortunes.FortuneDetail", b =>
                {
                    b.Navigation("FortuneUserRewards");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Languages.Language", b =>
                {
                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.GiftOfLoyalty", b =>
                {
                    b.Navigation("GiftOfUsers");
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.LoyaltyProgram", b =>
                {
                    b.Navigation("GiftOfLoyalty");

                    b.Navigation("LoyaltyProgramImages");

                    b.Navigation("PointOfUsers");

                    b.Navigation("ProductParticipatingLoyalty");
                });

            modelBuilder.Entity("BHS.Domain.Entities.LoyaltyPrograms.ProductParticipatingLoyalty", b =>
                {
                    b.Navigation("BarCodeOfProductParticipatingLoyalty");

                    b.Navigation("PointOfUsers");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Notify.NotificationSetUp", b =>
                {
                    b.Navigation("NotifyMessages");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.Attributes", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.ParentProduct", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("AttributeValues");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("ProductForUsers");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductParticipatingLoyalties");

                    b.Navigation("PromotionalProduct");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("GiftOfUsers");

                    b.Navigation("NotifyMessages");

                    b.Navigation("PointOfUsers");

                    b.Navigation("ProductForUsers");

                    b.Navigation("UserFollowVendors");

                    b.Navigation("UserSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.Feedback", b =>
                {
                    b.Navigation("FeedbackImages");
                });

            modelBuilder.Entity("BHS.Domain.Entities.Vendors.Vendor", b =>
                {
                    b.Navigation("CategoryOfVendors");

                    b.Navigation("Feedbacks");

                    b.Navigation("Fortunes");

                    b.Navigation("LoyaltyPrograms");

                    b.Navigation("NotificationSetUps");

                    b.Navigation("ParentProducts");

                    b.Navigation("PointOfUsers");

                    b.Navigation("RankOfUserSetting");

                    b.Navigation("UserFollowVendors");

                    b.Navigation("UserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
